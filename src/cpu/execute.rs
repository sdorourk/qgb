use std::fmt::Debug;

use crate::{
    mmu::{ReadWriteMemory, Tick},
    TCycles,
};

use super::{instruction::Instruction, opcode::Opcode, Cpu};

impl Instruction {
    pub(super) fn execute<T>(&self, _cpu: &mut Cpu<T>) -> TCycles
    where
        T: Debug + ReadWriteMemory + Tick,
    {
        match self.opcode {
            Opcode::Nop => self.cycles,
            // Opcode::LdDerefImmSp(_) => todo!(),
            // Opcode::Stop => todo!(),
            // Opcode::Jr(_) => todo!(),
            // Opcode::JrCond(_, _) => todo!(),
            // Opcode::LdWideRegImm(_, _) => todo!(),
            // Opcode::AddHLWideReg(_) => todo!(),
            // Opcode::LdDerefWideRegA(_) => todo!(),
            // Opcode::LdADerefWideReg(_) => todo!(),
            // Opcode::LdHLIncA => todo!(),
            // Opcode::LdHLDecA => todo!(),
            // Opcode::LdAHLInc => todo!(),
            // Opcode::LdAHLDec => todo!(),
            // Opcode::IncWideReg(_) => todo!(),
            // Opcode::DecWideReg(_) => todo!(),
            // Opcode::IncReg(_) => todo!(),
            // Opcode::DecReg(_) => todo!(),
            // Opcode::LdRegImm(_, _) => todo!(),
            // Opcode::Rlca => todo!(),
            // Opcode::Rrca => todo!(),
            // Opcode::Rla => todo!(),
            // Opcode::Rra => todo!(),
            // Opcode::Daa => todo!(),
            // Opcode::Cpl => todo!(),
            // Opcode::Scf => todo!(),
            // Opcode::Ccf => todo!(),
            // Opcode::Ld(_, _) => todo!(),
            // Opcode::Halt => todo!(),
            // Opcode::Add(_) => todo!(),
            // Opcode::Adc(_) => todo!(),
            // Opcode::Sub(_) => todo!(),
            // Opcode::Sbc(_) => todo!(),
            // Opcode::And(_) => todo!(),
            // Opcode::Xor(_) => todo!(),
            // Opcode::Or(_) => todo!(),
            // Opcode::Cp(_) => todo!(),
            // Opcode::RetCond(_) => todo!(),
            // Opcode::LdOffsetImmA(_) => todo!(),
            // Opcode::AddSpDisp(_) => todo!(),
            // Opcode::LdAOffsetImm(_) => todo!(),
            // Opcode::LdHLSPDisp(_) => todo!(),
            // Opcode::PopWideReg(_) => todo!(),
            // Opcode::Ret => todo!(),
            // Opcode::Reti => todo!(),
            // Opcode::JpHL => todo!(),
            // Opcode::LdSPHL => todo!(),
            // Opcode::JPCondImm(_, _) => todo!(),
            // Opcode::LdOffsetCA => todo!(),
            // Opcode::LdDerefImmA(_) => todo!(),
            // Opcode::LdAOffsetC => todo!(),
            // Opcode::LdADerefImm(_) => todo!(),
            // Opcode::JP(_) => todo!(),
            // Opcode::DI => todo!(),
            // Opcode::EI => todo!(),
            // Opcode::CallCondImm(_, _) => todo!(),
            // Opcode::PushWideReg(_) => todo!(),
            // Opcode::CallImm(_) => todo!(),
            // Opcode::AddImm(_) => todo!(),
            // Opcode::AdcImm(_) => todo!(),
            // Opcode::SubImm(_) => todo!(),
            // Opcode::SbcImm(_) => todo!(),
            // Opcode::AndImm(_) => todo!(),
            // Opcode::XorImm(_) => todo!(),
            // Opcode::OrImm(_) => todo!(),
            // Opcode::CpImm(_) => todo!(),
            // Opcode::Rst(_) => todo!(),
            // Opcode::Rlc(_) => todo!(),
            // Opcode::Rrc(_) => todo!(),
            // Opcode::Rl(_) => todo!(),
            // Opcode::Rr(_) => todo!(),
            // Opcode::Sla(_) => todo!(),
            // Opcode::Sra(_) => todo!(),
            // Opcode::Swap(_) => todo!(),
            // Opcode::Srl(_) => todo!(),
            // Opcode::Bit(_, _) => todo!(),
            // Opcode::Res(_, _) => todo!(),
            // Opcode::Set(_, _) => todo!(),
            _ => self.cycles,
        }
    }
}
